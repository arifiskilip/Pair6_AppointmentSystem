// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppointmentSystemContext))]
    [Migration("20240704132004_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentIntervalId")
                        .HasColumnType("int");

                    b.Property<short>("AppointmentStatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentIntervalId");

                    b.HasIndex("AppointmentStatusId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.AppointmentInterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("AppointmentStatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IntervalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStatusId");

                    b.HasIndex("DoctorId");

                    b.ToTable("AppointmentIntervals");
                });

            modelBuilder.Entity("Domain.Entities.AppointmentStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppointmentStatuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3493),
                            IsDeleted = false,
                            Name = "Available"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3495),
                            IsDeleted = false,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3495),
                            IsDeleted = false,
                            Name = "Completed"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3496),
                            IsDeleted = false,
                            Name = "Created"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BloodType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BloodTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3278),
                            IsDeleted = false,
                            Name = "A+"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3341),
                            IsDeleted = false,
                            Name = "A-"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3342),
                            IsDeleted = false,
                            Name = "B+"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3343),
                            IsDeleted = false,
                            Name = "B-"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3343),
                            IsDeleted = false,
                            Name = "AB+"
                        },
                        new
                        {
                            Id = (short)6,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3344),
                            IsDeleted = false,
                            Name = "AB-"
                        },
                        new
                        {
                            Id = (short)7,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3345),
                            IsDeleted = false,
                            Name = "O+"
                        },
                        new
                        {
                            Id = (short)8,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3346),
                            IsDeleted = false,
                            Name = "O-"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3521),
                            IsDeleted = false,
                            Name = "Aile Hekimliği"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3523),
                            IsDeleted = false,
                            Name = "Anesteziyoloji ve Reanimasyon"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3524),
                            IsDeleted = false,
                            Name = "Çocuk Sağlığı ve Hastalıkları"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3525),
                            IsDeleted = false,
                            Name = "Dahiliye"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3526),
                            IsDeleted = false,
                            Name = "Dermatoloji"
                        },
                        new
                        {
                            Id = (short)6,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3526),
                            IsDeleted = false,
                            Name = "Enfeksiyon Hastalıkları"
                        },
                        new
                        {
                            Id = (short)7,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3527),
                            IsDeleted = false,
                            Name = "Fiziksel Tıp ve Rehabilitasyon"
                        },
                        new
                        {
                            Id = (short)8,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3528),
                            IsDeleted = false,
                            Name = "Gastroenteroloji"
                        },
                        new
                        {
                            Id = (short)9,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3529),
                            IsDeleted = false,
                            Name = "Genel Cerrahi"
                        },
                        new
                        {
                            Id = (short)10,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3529),
                            IsDeleted = false,
                            Name = "Göz Hastalıkları"
                        },
                        new
                        {
                            Id = (short)11,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3530),
                            IsDeleted = false,
                            Name = "Kadın Hastalıkları ve Doğum"
                        },
                        new
                        {
                            Id = (short)12,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3531),
                            IsDeleted = false,
                            Name = "Kalp ve Damar Cerrahisi"
                        },
                        new
                        {
                            Id = (short)13,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3531),
                            IsDeleted = false,
                            Name = "Kardiyoloji"
                        },
                        new
                        {
                            Id = (short)14,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3532),
                            IsDeleted = false,
                            Name = "Kulak Burun Boğaz"
                        },
                        new
                        {
                            Id = (short)15,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3533),
                            IsDeleted = false,
                            Name = "Nöroloji"
                        },
                        new
                        {
                            Id = (short)16,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3534),
                            IsDeleted = false,
                            Name = "Nöroşirurji"
                        },
                        new
                        {
                            Id = (short)17,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3534),
                            IsDeleted = false,
                            Name = "Ortopedi ve Travmatoloji"
                        },
                        new
                        {
                            Id = (short)18,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3535),
                            IsDeleted = false,
                            Name = "Plastik, Rekonstrüktif ve Estetik Cerrahi"
                        },
                        new
                        {
                            Id = (short)19,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3536),
                            IsDeleted = false,
                            Name = "Psikiyatri"
                        },
                        new
                        {
                            Id = (short)20,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3536),
                            IsDeleted = false,
                            Name = "Radyoloji"
                        },
                        new
                        {
                            Id = (short)21,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3537),
                            IsDeleted = false,
                            Name = "Üroloji"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CodeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CodeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3644),
                            IsDeleted = false,
                            Name = "EmailConfirm"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3646),
                            IsDeleted = false,
                            Name = "PasswordReset"
                        });
                });

            modelBuilder.Entity("Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientInterval")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedules");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3569),
                            IsDeleted = false,
                            Name = "Women"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3571),
                            IsDeleted = false,
                            Name = "Man"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3593),
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3595),
                            IsDeleted = false,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3596),
                            IsDeleted = false,
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReportFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Domain.Entities.Title", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3616),
                            IsDeleted = false,
                            Name = "UzmDr"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3617),
                            IsDeleted = false,
                            Name = "Doc"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3618),
                            IsDeleted = false,
                            Name = "YrdDoc"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3619),
                            IsDeleted = false,
                            Name = "Prof"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedDate = new DateTime(2024, 7, 4, 16, 20, 4, 103, DateTimeKind.Local).AddTicks(3620),
                            IsDeleted = false,
                            Name = "OprDr"
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("GenderId")
                        .HasColumnType("smallint");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.VerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<short>("BranchId")
                        .HasColumnType("smallint");

                    b.Property<short>("TitleId")
                        .HasColumnType("smallint");

                    b.HasIndex("BranchId");

                    b.HasIndex("TitleId");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<short>("BloodTypeId")
                        .HasColumnType("smallint");

                    b.HasIndex("BloodTypeId");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Domain.Entities.AppointmentInterval", "AppointmentInterval")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentIntervalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppointmentStatus", "AppointmentStatus")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppointmentInterval");

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.AppointmentInterval", b =>
                {
                    b.HasOne("Domain.Entities.AppointmentStatus", "AppointmentStatus")
                        .WithMany("AppointmentIntervals")
                        .HasForeignKey("AppointmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("AppointmentIntervals")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentStatus");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Feedback")
                        .HasForeignKey("Domain.Entities.Feedback", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithOne("Report")
                        .HasForeignKey("Domain.Entities.Report", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.VerificationCode", b =>
                {
                    b.HasOne("Domain.Entities.CodeType", "CodeType")
                        .WithMany("VerificationCodes")
                        .HasForeignKey("CodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.Branch", "Branch")
                        .WithMany("Doctors")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Title", "Title")
                        .WithMany("Doctors")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.BloodType", "BloodType")
                        .WithMany("Patients")
                        .HasForeignKey("BloodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("Feedback");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("Domain.Entities.AppointmentInterval", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.AppointmentStatus", b =>
                {
                    b.Navigation("AppointmentIntervals");

                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.BloodType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Domain.Entities.Branch", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.CodeType", b =>
                {
                    b.Navigation("VerificationCodes");
                });

            modelBuilder.Entity("Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Title", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("AppointmentIntervals");

                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
